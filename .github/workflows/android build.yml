# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Android build

on: workflow_dispatch

#on:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
     # - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603

      # https://github.com/marketplace/actions/setup-flutter-sdk
      - name: Setup Flutter SDK
        uses: flutter-actions/setup-flutter@v2.2
        with:
          channel: stable
          version: 3.7.5

      - name: Install dependencies
        run: flutter pub get

      - name: "Decode Environment File"
        run: sudo echo "${ENV_secret// /}" | base64 --decode > lib/.env
        env:
          ENV_SECRET: ${{ secrets.ENV_FILE }}

      - name: "Inject Environment Variables"
        run: flutter pub run build_runner build --delete-conflicting-outputs

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze --fatal-infos

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: flutter test

      - name: Decode gpg store
        run: |
          TMP_KEYSTORE_FILE_PATH="${RUNNER_TEMP}"/keystore
          mkdir $TMP_KEYSTORE_FILE_PATH 
          echo "${{ secrets.GPG_STORE }}" > your_keystore.jks.asc
          echo "KEYSTORE_PATH=$TMP_KEYSTORE_FILE_PATH/your_keystore.jks" >> $GITHUB_ENV
          echo "${{ secrets.GPG_STORE }}" > your_keystore.jks.asc
          gpg -d --passphrase "${{ secrets.GPG_PHRASE }}" --batch your_keystore.jks.asc > "$TMP_KEYSTORE_FILE_PATH/your_keystore.jks"

      - name: Build APK
        env:
          KEYSTORE_PATH: ${{ env.KEYSTORE_PATH }}
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: flutter build apk
        if: success()

      # Upload the generated APK as an artifact
      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.apk          
          
      - name: Build appbundle
        env:
          KEYSTORE_PATH: ${{ env.KEYSTORE_PATH }}
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: flutter build appbundle

      # Archive the app bundle as an artifact
      - name: Archive app bundle
        uses: actions/upload-artifact@v2
        with:
          name: app-release-bundle
          path: build/app/outputs/bundle/release/app-release.aab
        
